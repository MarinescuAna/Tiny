State 40 conflicts: 8 shift/reduce
State 48 conflicts: 8 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program declaration
    2        | declaration

    3 declaration: fun_declaration
    4            | var_declaration

    5 fun_declaration: type NAME LPAR formal_pars RPAR block

    6 formal_pars: formal_par
    7            | formal_pars COMMA formal_par

    8 formal_par: type NAME

    9 block: LBRACE var_declarations statements RBRACE
   10      | LBRACE statements RBRACE

   11 var_declarations: var_declaration
   12                 | var_declarations var_declaration

   13 var_declaration: type NAME SEMICOLON

   14 type: INT
   15     | CHAR
   16     | type LBRACK exp RBRACK

   17 statements: statement
   18           | statements SEMICOLON statement

   19 statement: IF LPAR exp RPAR statement
   20          | IF LPAR exp RPAR statement ELSE statement
   21          | WHILE LPAR exp RPAR statement
   22          | lexp ASSIGN exp
   23          | RETURN exp
   24          | NAME LPAR pars RPAR
   25          | block
   26          | WRITE exp
   27          | READ lexp

   28 lexp: var
   29     | lexp LBRACK exp RBRACK

   30 exp: lexp
   31    | exp binop exp
   32    | unop exp
   33    | LPAR exp RPAR
   34    | NUMBER
   35    | NAME LPAR pars RPAR
   36    | QCHAR
   37    | LENGTH lexp

   38 binop: MINUS
   39      | PLUS
   40      | TIMES
   41      | DIVIDE
   42      | EQUAL
   43      | NEQUAL
   44      | GREATER
   45      | LESS

   46 unop: MINUS
   47     | NOT

   48 pars: exp
   49     | pars COMMA exp

   50 var: NAME


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TIMES (258) 40
    DIVIDE (259) 41
    PLUS (260) 39
    MINUS (261) 38 46
    LPAR (262) 5 19 20 21 24 33 35
    LBRACK (263) 16 29
    COMMA (264) 7 49
    RPAR (265) 5 19 20 21 24 33 35
    RBRACK (266) 16 29
    LBRACE (267) 9 10
    ASSIGN (268) 22
    LESS (269) 45
    EQUAL (270) 42
    GREATER (271) 44
    NEQUAL (272) 43
    NOT (273) 47
    RETURN (274) 23
    NAME (275) 5 8 13 24 35 50
    NUMBER (276) 34
    QCHAR (277) 36
    LENGTH (278) 37
    INT (279) 14
    CHAR (280) 15
    WRITE (281) 26
    READ (282) 27
    WHILE (283) 21
    IF (284) 19 20
    ELSE (285) 20
    RBRACE (286) 9 10
    SEMICOLON (287) 13 18


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    program (34)
        on left: 1 2
        on right: 0 1
    declaration (35)
        on left: 3 4
        on right: 1 2
    fun_declaration (36)
        on left: 5
        on right: 3
    formal_pars (37)
        on left: 6 7
        on right: 5 7
    formal_par (38)
        on left: 8
        on right: 6 7
    block (39)
        on left: 9 10
        on right: 5 25
    var_declarations (40)
        on left: 11 12
        on right: 9 12
    var_declaration (41)
        on left: 13
        on right: 4 11 12
    type (42)
        on left: 14 15 16
        on right: 5 8 13 16
    statements (43)
        on left: 17 18
        on right: 9 10 18
    statement (44)
        on left: 19 20 21 22 23 24 25 26 27
        on right: 17 18 19 20 21
    lexp (45)
        on left: 28 29
        on right: 22 27 29 30 37
    exp (46)
        on left: 30 31 32 33 34 35 36 37
        on right: 16 19 20 21 22 23 26 29 31 32 33 48 49
    binop (47)
        on left: 38 39 40 41 42 43 44 45
        on right: 31
    unop (48)
        on left: 46 47
        on right: 32
    pars (49)
        on left: 48 49
        on right: 24 35 49
    var (50)
        on left: 50
        on right: 28


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    program          go to state 3
    declaration      go to state 4
    fun_declaration  go to state 5
    var_declaration  go to state 6
    type             go to state 7


State 1

   14 type: INT .

    $default  reduce using rule 14 (type)


State 2

   15 type: CHAR .

    $default  reduce using rule 15 (type)


State 3

    0 $accept: program . $end
    1 program: program . declaration

    $end  shift, and go to state 8
    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    declaration      go to state 9
    fun_declaration  go to state 5
    var_declaration  go to state 6
    type             go to state 7


State 4

    2 program: declaration .

    $default  reduce using rule 2 (program)


State 5

    3 declaration: fun_declaration .

    $default  reduce using rule 3 (declaration)


State 6

    4 declaration: var_declaration .

    $default  reduce using rule 4 (declaration)


State 7

    5 fun_declaration: type . NAME LPAR formal_pars RPAR block
   13 var_declaration: type . NAME SEMICOLON
   16 type: type . LBRACK exp RBRACK

    LBRACK  shift, and go to state 10
    NAME    shift, and go to state 11


State 8

    0 $accept: program $end .

    $default  accept


State 9

    1 program: program declaration .

    $default  reduce using rule 1 (program)


State 10

   16 type: type LBRACK . exp RBRACK

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 20
    unop  go to state 21
    var   go to state 22


State 11

    5 fun_declaration: type NAME . LPAR formal_pars RPAR block
   13 var_declaration: type NAME . SEMICOLON

    LPAR       shift, and go to state 23
    SEMICOLON  shift, and go to state 24


State 12

   46 unop: MINUS .

    $default  reduce using rule 46 (unop)


State 13

   33 exp: LPAR . exp RPAR

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 25
    unop  go to state 21
    var   go to state 22


State 14

   47 unop: NOT .

    $default  reduce using rule 47 (unop)


State 15

   35 exp: NAME . LPAR pars RPAR
   50 var: NAME .

    LPAR  shift, and go to state 26

    $default  reduce using rule 50 (var)


State 16

   34 exp: NUMBER .

    $default  reduce using rule 34 (exp)


State 17

   36 exp: QCHAR .

    $default  reduce using rule 36 (exp)


State 18

   37 exp: LENGTH . lexp

    NAME  shift, and go to state 27

    lexp  go to state 28
    var   go to state 22


State 19

   29 lexp: lexp . LBRACK exp RBRACK
   30 exp: lexp .

    LBRACK  shift, and go to state 29

    $default  reduce using rule 30 (exp)


State 20

   16 type: type LBRACK exp . RBRACK
   31 exp: exp . binop exp

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    RBRACK   shift, and go to state 34
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    binop  go to state 39


State 21

   32 exp: unop . exp

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 40
    unop  go to state 21
    var   go to state 22


State 22

   28 lexp: var .

    $default  reduce using rule 28 (lexp)


State 23

    5 fun_declaration: type NAME LPAR . formal_pars RPAR block

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    formal_pars  go to state 41
    formal_par   go to state 42
    type         go to state 43


State 24

   13 var_declaration: type NAME SEMICOLON .

    $default  reduce using rule 13 (var_declaration)


State 25

   31 exp: exp . binop exp
   33    | LPAR exp . RPAR

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    RPAR     shift, and go to state 44
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    binop  go to state 39


State 26

   35 exp: NAME LPAR . pars RPAR

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 45
    unop  go to state 21
    pars  go to state 46
    var   go to state 22


State 27

   50 var: NAME .

    $default  reduce using rule 50 (var)


State 28

   29 lexp: lexp . LBRACK exp RBRACK
   37 exp: LENGTH lexp .

    LBRACK  shift, and go to state 29

    $default  reduce using rule 37 (exp)


State 29

   29 lexp: lexp LBRACK . exp RBRACK

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 47
    unop  go to state 21
    var   go to state 22


State 30

   40 binop: TIMES .

    $default  reduce using rule 40 (binop)


State 31

   41 binop: DIVIDE .

    $default  reduce using rule 41 (binop)


State 32

   39 binop: PLUS .

    $default  reduce using rule 39 (binop)


State 33

   38 binop: MINUS .

    $default  reduce using rule 38 (binop)


State 34

   16 type: type LBRACK exp RBRACK .

    $default  reduce using rule 16 (type)


State 35

   45 binop: LESS .

    $default  reduce using rule 45 (binop)


State 36

   42 binop: EQUAL .

    $default  reduce using rule 42 (binop)


State 37

   44 binop: GREATER .

    $default  reduce using rule 44 (binop)


State 38

   43 binop: NEQUAL .

    $default  reduce using rule 43 (binop)


State 39

   31 exp: exp binop . exp

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 48
    unop  go to state 21
    var   go to state 22


State 40

   31 exp: exp . binop exp
   32    | unop exp .

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    TIMES     [reduce using rule 32 (exp)]
    DIVIDE    [reduce using rule 32 (exp)]
    PLUS      [reduce using rule 32 (exp)]
    MINUS     [reduce using rule 32 (exp)]
    LESS      [reduce using rule 32 (exp)]
    EQUAL     [reduce using rule 32 (exp)]
    GREATER   [reduce using rule 32 (exp)]
    NEQUAL    [reduce using rule 32 (exp)]
    $default  reduce using rule 32 (exp)

    binop  go to state 39


State 41

    5 fun_declaration: type NAME LPAR formal_pars . RPAR block
    7 formal_pars: formal_pars . COMMA formal_par

    COMMA  shift, and go to state 49
    RPAR   shift, and go to state 50


State 42

    6 formal_pars: formal_par .

    $default  reduce using rule 6 (formal_pars)


State 43

    8 formal_par: type . NAME
   16 type: type . LBRACK exp RBRACK

    LBRACK  shift, and go to state 10
    NAME    shift, and go to state 51


State 44

   33 exp: LPAR exp RPAR .

    $default  reduce using rule 33 (exp)


State 45

   31 exp: exp . binop exp
   48 pars: exp .

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    $default  reduce using rule 48 (pars)

    binop  go to state 39


State 46

   35 exp: NAME LPAR pars . RPAR
   49 pars: pars . COMMA exp

    COMMA  shift, and go to state 52
    RPAR   shift, and go to state 53


State 47

   29 lexp: lexp LBRACK exp . RBRACK
   31 exp: exp . binop exp

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    RBRACK   shift, and go to state 54
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    binop  go to state 39


State 48

   31 exp: exp . binop exp
   31    | exp binop exp .

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    TIMES     [reduce using rule 31 (exp)]
    DIVIDE    [reduce using rule 31 (exp)]
    PLUS      [reduce using rule 31 (exp)]
    MINUS     [reduce using rule 31 (exp)]
    LESS      [reduce using rule 31 (exp)]
    EQUAL     [reduce using rule 31 (exp)]
    GREATER   [reduce using rule 31 (exp)]
    NEQUAL    [reduce using rule 31 (exp)]
    $default  reduce using rule 31 (exp)

    binop  go to state 39


State 49

    7 formal_pars: formal_pars COMMA . formal_par

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    formal_par  go to state 55
    type        go to state 43


State 50

    5 fun_declaration: type NAME LPAR formal_pars RPAR . block

    LBRACE  shift, and go to state 56

    block  go to state 57


State 51

    8 formal_par: type NAME .

    $default  reduce using rule 8 (formal_par)


State 52

   49 pars: pars COMMA . exp

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 58
    unop  go to state 21
    var   go to state 22


State 53

   35 exp: NAME LPAR pars RPAR .

    $default  reduce using rule 35 (exp)


State 54

   29 lexp: lexp LBRACK exp RBRACK .

    $default  reduce using rule 29 (lexp)


State 55

    7 formal_pars: formal_pars COMMA formal_par .

    $default  reduce using rule 7 (formal_pars)


State 56

    9 block: LBRACE . var_declarations statements RBRACE
   10      | LBRACE . statements RBRACE

    LBRACE  shift, and go to state 56
    RETURN  shift, and go to state 59
    NAME    shift, and go to state 60
    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    WRITE   shift, and go to state 61
    READ    shift, and go to state 62
    WHILE   shift, and go to state 63
    IF      shift, and go to state 64

    block             go to state 65
    var_declarations  go to state 66
    var_declaration   go to state 67
    type              go to state 68
    statements        go to state 69
    statement         go to state 70
    lexp              go to state 71
    var               go to state 22


State 57

    5 fun_declaration: type NAME LPAR formal_pars RPAR block .

    $default  reduce using rule 5 (fun_declaration)


State 58

   31 exp: exp . binop exp
   49 pars: pars COMMA exp .

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    $default  reduce using rule 49 (pars)

    binop  go to state 39


State 59

   23 statement: RETURN . exp

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 72
    unop  go to state 21
    var   go to state 22


State 60

   24 statement: NAME . LPAR pars RPAR
   50 var: NAME .

    LPAR  shift, and go to state 73

    $default  reduce using rule 50 (var)


State 61

   26 statement: WRITE . exp

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 74
    unop  go to state 21
    var   go to state 22


State 62

   27 statement: READ . lexp

    NAME  shift, and go to state 27

    lexp  go to state 75
    var   go to state 22


State 63

   21 statement: WHILE . LPAR exp RPAR statement

    LPAR  shift, and go to state 76


State 64

   19 statement: IF . LPAR exp RPAR statement
   20          | IF . LPAR exp RPAR statement ELSE statement

    LPAR  shift, and go to state 77


State 65

   25 statement: block .

    $default  reduce using rule 25 (statement)


State 66

    9 block: LBRACE var_declarations . statements RBRACE
   12 var_declarations: var_declarations . var_declaration

    LBRACE  shift, and go to state 56
    RETURN  shift, and go to state 59
    NAME    shift, and go to state 60
    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    WRITE   shift, and go to state 61
    READ    shift, and go to state 62
    WHILE   shift, and go to state 63
    IF      shift, and go to state 64

    block            go to state 65
    var_declaration  go to state 78
    type             go to state 68
    statements       go to state 79
    statement        go to state 70
    lexp             go to state 71
    var              go to state 22


State 67

   11 var_declarations: var_declaration .

    $default  reduce using rule 11 (var_declarations)


State 68

   13 var_declaration: type . NAME SEMICOLON
   16 type: type . LBRACK exp RBRACK

    LBRACK  shift, and go to state 10
    NAME    shift, and go to state 80


State 69

   10 block: LBRACE statements . RBRACE
   18 statements: statements . SEMICOLON statement

    RBRACE     shift, and go to state 81
    SEMICOLON  shift, and go to state 82


State 70

   17 statements: statement .

    $default  reduce using rule 17 (statements)


State 71

   22 statement: lexp . ASSIGN exp
   29 lexp: lexp . LBRACK exp RBRACK

    LBRACK  shift, and go to state 29
    ASSIGN  shift, and go to state 83


State 72

   23 statement: RETURN exp .
   31 exp: exp . binop exp

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    $default  reduce using rule 23 (statement)

    binop  go to state 39


State 73

   24 statement: NAME LPAR . pars RPAR

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 45
    unop  go to state 21
    pars  go to state 84
    var   go to state 22


State 74

   26 statement: WRITE exp .
   31 exp: exp . binop exp

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    $default  reduce using rule 26 (statement)

    binop  go to state 39


State 75

   27 statement: READ lexp .
   29 lexp: lexp . LBRACK exp RBRACK

    LBRACK  shift, and go to state 29

    $default  reduce using rule 27 (statement)


State 76

   21 statement: WHILE LPAR . exp RPAR statement

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 85
    unop  go to state 21
    var   go to state 22


State 77

   19 statement: IF LPAR . exp RPAR statement
   20          | IF LPAR . exp RPAR statement ELSE statement

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 86
    unop  go to state 21
    var   go to state 22


State 78

   12 var_declarations: var_declarations var_declaration .

    $default  reduce using rule 12 (var_declarations)


State 79

    9 block: LBRACE var_declarations statements . RBRACE
   18 statements: statements . SEMICOLON statement

    RBRACE     shift, and go to state 87
    SEMICOLON  shift, and go to state 82


State 80

   13 var_declaration: type NAME . SEMICOLON

    SEMICOLON  shift, and go to state 24


State 81

   10 block: LBRACE statements RBRACE .

    $default  reduce using rule 10 (block)


State 82

   18 statements: statements SEMICOLON . statement

    LBRACE  shift, and go to state 56
    RETURN  shift, and go to state 59
    NAME    shift, and go to state 60
    WRITE   shift, and go to state 61
    READ    shift, and go to state 62
    WHILE   shift, and go to state 63
    IF      shift, and go to state 64

    block      go to state 65
    statement  go to state 88
    lexp       go to state 71
    var        go to state 22


State 83

   22 statement: lexp ASSIGN . exp

    MINUS   shift, and go to state 12
    LPAR    shift, and go to state 13
    NOT     shift, and go to state 14
    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    QCHAR   shift, and go to state 17
    LENGTH  shift, and go to state 18

    lexp  go to state 19
    exp   go to state 89
    unop  go to state 21
    var   go to state 22


State 84

   24 statement: NAME LPAR pars . RPAR
   49 pars: pars . COMMA exp

    COMMA  shift, and go to state 52
    RPAR   shift, and go to state 90


State 85

   21 statement: WHILE LPAR exp . RPAR statement
   31 exp: exp . binop exp

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    RPAR     shift, and go to state 91
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    binop  go to state 39


State 86

   19 statement: IF LPAR exp . RPAR statement
   20          | IF LPAR exp . RPAR statement ELSE statement
   31 exp: exp . binop exp

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    RPAR     shift, and go to state 92
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    binop  go to state 39


State 87

    9 block: LBRACE var_declarations statements RBRACE .

    $default  reduce using rule 9 (block)


State 88

   18 statements: statements SEMICOLON statement .

    $default  reduce using rule 18 (statements)


State 89

   22 statement: lexp ASSIGN exp .
   31 exp: exp . binop exp

    TIMES    shift, and go to state 30
    DIVIDE   shift, and go to state 31
    PLUS     shift, and go to state 32
    MINUS    shift, and go to state 33
    LESS     shift, and go to state 35
    EQUAL    shift, and go to state 36
    GREATER  shift, and go to state 37
    NEQUAL   shift, and go to state 38

    $default  reduce using rule 22 (statement)

    binop  go to state 39


State 90

   24 statement: NAME LPAR pars RPAR .

    $default  reduce using rule 24 (statement)


State 91

   21 statement: WHILE LPAR exp RPAR . statement

    LBRACE  shift, and go to state 56
    RETURN  shift, and go to state 59
    NAME    shift, and go to state 60
    WRITE   shift, and go to state 61
    READ    shift, and go to state 62
    WHILE   shift, and go to state 63
    IF      shift, and go to state 64

    block      go to state 65
    statement  go to state 93
    lexp       go to state 71
    var        go to state 22


State 92

   19 statement: IF LPAR exp RPAR . statement
   20          | IF LPAR exp RPAR . statement ELSE statement

    LBRACE  shift, and go to state 56
    RETURN  shift, and go to state 59
    NAME    shift, and go to state 60
    WRITE   shift, and go to state 61
    READ    shift, and go to state 62
    WHILE   shift, and go to state 63
    IF      shift, and go to state 64

    block      go to state 65
    statement  go to state 94
    lexp       go to state 71
    var        go to state 22


State 93

   21 statement: WHILE LPAR exp RPAR statement .

    $default  reduce using rule 21 (statement)


State 94

   19 statement: IF LPAR exp RPAR statement .
   20          | IF LPAR exp RPAR statement . ELSE statement

    ELSE  shift, and go to state 95

    $default  reduce using rule 19 (statement)


State 95

   20 statement: IF LPAR exp RPAR statement ELSE . statement

    LBRACE  shift, and go to state 56
    RETURN  shift, and go to state 59
    NAME    shift, and go to state 60
    WRITE   shift, and go to state 61
    READ    shift, and go to state 62
    WHILE   shift, and go to state 63
    IF      shift, and go to state 64

    block      go to state 65
    statement  go to state 96
    lexp       go to state 71
    var        go to state 22


State 96

   20 statement: IF LPAR exp RPAR statement ELSE statement .

    $default  reduce using rule 20 (statement)
